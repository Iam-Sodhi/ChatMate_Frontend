generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  servers  Server[]
  members  Member[]
  channels Channel[]

  videos                  Video[]
  videoEngagements        VideoEngagement[]
  comments                Comment[]
  announcements           Announcement[]
  announcementEngagements AnnouncementEngagement[]
  followers               FollowEngagement[]       @relation("Followings")
  followings              FollowEngagement[]       @relation("Followers")
  playlists               Playlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

model Video {
  id           String   @id @default(uuid())
  title        String?  @db.Text
  thumbnailUrl String?  @db.Text
  description  String?  @db.Text
  videoUrl     String   @db.Text
  publish      Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  VideoEngagements VideoEngagement[]
  comments         Comment[]
  playlists        PlaylistHasVideo[]

  userId String
  user   Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum EngagementType {
  LIKE
  DISLIKE
  VIEW
  SAVE
  FOLLOW
}

model VideoEngagement {
  id             String         @id @default(uuid())
  userId         String?
  videoId        String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  engagementType EngagementType
  user           Profile?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  video          Video?         @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([videoId])
}

model Comment {
  id        String   @id @default(uuid())
  message   String   @db.Text
  videoId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user      Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([videoId])
  @@index([userId])
}

model Announcement {
  id                      String                   @id @default(uuid())
  message                 String                   @db.Text
  userId                  String
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  user                    Profile                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcementEngagements AnnouncementEngagement[]

  @@index([userId])
}

model AnnouncementEngagement {
  userId         String
  engagementType EngagementType
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  announcementId String
  user           Profile        @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcement   Announcement   @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@id([userId, announcementId])
  @@index([announcementId])
  @@index([userId])
}

model FollowEngagement {
  followerId     String
  followingId    String
  engagementType EngagementType
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  following      Profile        @relation("Followings", fields: [followingId], references: [id], onDelete: Cascade)
  follower       Profile        @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}
model Playlist {
  id          String             @id @default(uuid())
  title       String             @db.Text
  description String?            @db.Text
  userId      String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  user        Profile?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos      PlaylistHasVideo[]

  @@index([userId])
}

model PlaylistHasVideo {
  id         String    @id @default(uuid())
  playlistId String
  videoId    String
  playlist   Playlist? @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  video      Video?    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([playlistId, videoId])
  @@index([playlistId])
  @@index([videoId])
}

